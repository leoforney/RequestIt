/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   dom-reorderer.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/mixins/gesture-event-listeners.d.ts" />
/// <reference path="../polymer/types/lib/utils/flattened-nodes-observer.d.ts" />

declare namespace UiElements {

  /**
   * A list of arrangable items.
   *
   * This element is based on
   * https://github.com/PolymerElements/iron-elements/issues/8#issuecomment-163696858
   *
   * It only works with `dom-repeat` custom element.
   * Items in the repeater becomes draggable and it's position can be changed.
   * After arrangment has changed the `dom-order-changed` custom event is fired to
   * notify listeners about the change.
   *
   * Note: Arrangable items has to be of a type of HTMLElement (nodeType === 1).
   * It ignores text nodes.
   *
   * ### Example
   *
   * ```html
   * <dom-reorderer on-dom-order-changed="_positionChanged">
   *    <template is="dom-repeat" items="[[items]]">
   *      <div>[[item]]</div>
   *    </template>
   * </dom-reorderer>
   * ```
   *
   * ### Styling
   *
   * `<dom-reorderer>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--dom-reorderer` | Mixin applied to the element | `{}`
   * `--dom-reorderer-dragging-item` | Mixin applied to the element that is dragged by the user | `{}`
   * `--dom-reorderer-moving-item` | Mixin applied to all elements that are being moved while list order change | `{}`
   * `--dom-reorderer-box-shaddow-color` | Color of the shaddow of the dragged item | `rgba(50, 50, 50, 0.75)`
   *
   * You can also define `.dragging` and `.moving` classes in host application
   * to the child elements inside the repeater.
   *
   * #### Example:
   *
   * ```html
   * <style>
   *  .item {
   *    background-color: #fff;
   *    padding-right: 12px;
   *  }
   *  .item.moving {
   *    background-color: yellow;
   *  }
   *  .item.dragging {
   *    background-color: green;
   *  }
   * </style>
   * <dom-reorderer on-dom-order-changed="_positionChanged">
   *    <template is="dom-repeat" items="[[items]]">
   *      <div class="item">[[item]]</div>
   *    </template>
   * </dom-reorderer>
   * ```
   */
  class DomReorderer extends
    Polymer.GestureEventListeners(
    Polymer.Element) {

    /**
     * Dragged element start top position relative to the parent element.
     */
    readonly startScrollTop: number|null|undefined;

    /**
     * A reference to the element currently being dragged.
     */
    readonly dragElement: HTMLElement|null|undefined;

    /**
     * Model for dragged element.
     */
    readonly dragModel: object|null|undefined;

    /**
     * Index of the item being under the dragged item.
     */
    readonly overIndex: number|null|undefined;

    /**
     * Model of the element being under the dragged item.
     */
    readonly overModel: object|null|undefined;

    /**
     * If set the drag is disabled.
     */
    disabled: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * A handler for a `slotchange` event to process added or removed nodes.
     *
     * @param info Change info record
     */
    _slotChangeHandler(info: object|null): void;

    /**
     * Checks id the node is a valid target for dragging support.
     *
     * @param node Node to test
     */
    _isValidTarget(node: Node|null): Boolean|null;

    /**
     * Checks if a node is `dom-repeat` element.
     * It accounts for web components spec 0 and 1 specification.
     *
     * @param node Node to test
     */
    _isRepeater(node: Node|null): Boolean|null;

    /**
     * Handles new nodes added to the light DOM.
     *
     * @param nodes List of added nodes.
     */
    _processAddedNodes(nodes: Array<Node|null>|null): void;

    /**
     * Handles removal of nodes from the light DOM.
     *
     * @param nodes List of removed nodes.
     */
    _processRemovedNodes(nodes: Array<Node|null>|null): void;

    /**
     * Updaters the position of the dragging element when scrolling the element.
     */
    _handleScroll(): void;

    /**
     * Handles track event dispatched by `Polymer.Gestures` library.
     * This method calls corresponding method to current dragging state.
     */
    _handleTrack(e: CustomEvent|null): void;

    /**
     * A handler for track stat event.
     * Captures the initial state to be used in other handlers.
     *
     * @param e The track event
     */
    _onTrackStart(e: Event|null): void;

    /**
     * Updates the position of dragging element and other elements being under
     * dragged element.
     *
     * @param e The track event
     */
    _onTrack(e: Event|null): void;

    /**
     * Saves current state and updates list order.
     */
    _onTrackEnd(): void;

    /**
     * Resets children to original state after gradding ends.
     */
    _resetChildrenDragging(): void;

    /**
     * Gets the top level item from the DOM repeater that has been marked as a draggable item.
     * The event can originate from child elements which shouldn't be dragged.
     *
     * @param e The track event
     * @returns An element that is container for draggable items. Undefined if couldn't
     * find.
     */
    _getReorderedItem(e: Event|null): HTMLElement|null;

    /**
     * Re-positions dragged element to the place where it belongs.
     * It accounts for scroll position if it changed since dragging started.
     *
     * @param dy Delta from starting position.
     */
    _updateDragPosition(dy: Number|null): void;
  }
}

interface HTMLElementTagNameMap {
  "dom-reorderer": UiElements.DomReorderer;
}
